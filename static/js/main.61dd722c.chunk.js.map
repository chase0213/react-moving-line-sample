{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","show1st","show2nd","setTimeout","setState","_this2","data","content","directions","AnimationDirection","Downward","Rightward","background","color","Leftward","Upward","react_default","a","createElement","className","MovingLine_default","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAwEeA,qBAnEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,SAAS,EACTC,SAAS,GAGXC,WAAW,WACTV,EAAKW,SAAS,CAACH,SAAS,IACxBE,WAAW,WACTV,EAAKW,SAAS,CAACF,SAAS,KACvB,OACF,KAbcT,wEAgBV,IAAAY,EAAAT,KAgBP,OAfAA,KAAKU,KAAO,CACV,CACEC,QAAS,sEACTC,WAAY,CAACC,qBAAmBC,SAAUD,qBAAmBE,WAC7DC,WAAY,2BACZC,MAAO,WAET,CACEN,QAAS,oGACTC,WAAY,CAACC,qBAAmBK,SAAUL,qBAAmBM,QAC7DH,WAAY,wBACZC,MAAO,6BAKTG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACX,WACA,GAAId,EAAKL,MAAMC,QACb,OACEe,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEV,QAASF,EAAKC,KAAK,GAAV,QACTE,WAAYH,EAAKC,KAAK,GAAV,WACZM,WAAYP,EAAKC,KAAK,GAAV,WACZO,MAAOR,EAAKC,KAAK,GAAV,QAPb,IAaJU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACX,WACA,GAAId,EAAKL,MAAME,QACb,OACEc,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEV,QAASF,EAAKC,KAAK,GAAV,QACTE,WAAYH,EAAKC,KAAK,GAAV,WACZM,WAAYP,EAAKC,KAAK,GAAV,WACZO,MAAOR,EAAKC,KAAK,GAAV,QAPb,YAlDMe,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.61dd722c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport MovingLine, { AnimationDirection } from 'react-moving-line';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      show1st: true,\n      show2nd: false,\n    };\n\n    setTimeout(() => {\n      this.setState({show1st: true});\n      setTimeout(() => {\n        this.setState({show2nd: true});\n      }, 1600);\n    }, 1000);\n  }\n\n  render() {\n    this.data = [\n      {\n        content: '<h1>Hello World</h1><p>This is embedded by the parent component</p>',\n        directions: [AnimationDirection.Downward, AnimationDirection.Rightward],\n        background: 'rgba(172, 218, 253, 1.0)',\n        color: '#505050',\n      },\n      {\n        content: '<h1>This is the second container</h1><p>This content is also embedded by the parent component</p>',\n        directions: [AnimationDirection.Leftward, AnimationDirection.Upward],\n        background: 'rgba(32, 32, 32, 0.8)',\n        color: 'rgba(255, 255, 255, 1.0)'\n      },\n    ]\n\n    return (\n      <div className=\"container\">\n        <div className=\"first-content\">\n          {(() => {\n            if (this.state.show1st) {\n              return (\n                <MovingLine\n                  content={this.data[0]['content']}\n                  directions={this.data[0]['directions']}\n                  background={this.data[0]['background']}\n                  color={this.data[0]['color']}>\n                </MovingLine>\n              );\n            }\n          })()}\n        </div>\n        <div className=\"second-content\">\n          {(() => {\n            if (this.state.show2nd) {\n              return (\n                <MovingLine\n                  content={this.data[1]['content']}\n                  directions={this.data[1]['directions']}\n                  background={this.data[1]['background']}\n                  color={this.data[1]['color']}>\n                </MovingLine>\n              );\n            }\n          })()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}